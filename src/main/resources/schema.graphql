directive @Size(
    min : Int = 0, max : Int = 2147483647,
    message : String = "Required to be between {min} and {max} characters in length."
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
The query root of GraphQL interface.
"""
type Query {
    """
    The currently authenticated user.
    """
    viewer: User!
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
    """
    Create a new product.
    """
    createProduct(
        """
        Parameters for create product.
        """
        input: CreateProductInput!
    ): ProductPayload

    """
    Update a product.
    """
    updateProduct(
        """
        Parameters for update product.
        """
        input: UpdateProductInput!
    ): ProductPayload

    """
    Delete a product and all of related items.
    """
    deleteProduct(
        """
        Parameters for delete product.
        """
        input: DeleteProductInput!
    ): ProductPayload
}

# common types region

"""
Possible directions in which to order a list of items when provided an
`orderBy` argument.
"""
enum OrderDirection {
    """
    Specifies an ascending order for a given `orderBy` argument.
    """
    ASC

    """
    Specifies a descending order for a given `orderBy` argument.
    """
    DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
    """
    When paginating forwards, the cursor to continue.
    """
    endCursor: String

    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!

    """
    When paginating backwards, are there more items?
    """
    hasPreviousPage: Boolean!

    """
    When paginating backwards, the cursor to continue.
    """
    startCursor: String
}

# domain types region

"""
The user roles.
"""
enum UserRole {
    STAFF
    CUSTOMER
}

"""
A user is an individual's account that has access to products and can make
new content.
"""
type User {
    id: ID!

    """
    The user's profile name.
    """
    name: String!

    """
    The user's email address.
    """
    email: String!

    """
    A list of user's roles.
    """
    roles: [UserRole]

    # products(type: String): [Product]

    """
    Returns a single product by id.
    """
    product(
        """
        The id for the product to be returned.
        """
        id: String!
    ): Product

    """
    A list of products the user has access to.
    """
    products(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first N elements from the list.
        """
        first: Int

        """
        Returns the last N elements from the list.
        """
        last: Int

        """
        Filtering options for products.
        """
        filterBy: UserProductFilters = {}

        """
        Ordering options for products from the connection.
        """
        orderBy: UserProductOrder = {field: NAME, direction: ASC}
    ): UserProductConnection!
}

"""
The connection type for User Product.
"""
type UserProductConnection {
    """
    A list of edges.
    """
    edges: [UserProductEdge]

    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!

    """
    Identifies the total count of items in the connection.
    """
    totalCount: Int!
}

"""
User Product edge in a connection.
"""
type UserProductEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!

    """
    The item at the end of the edge.
    """
    node: Product!
}

"""
Filter for Int values. Only one operator applies at a time.
"""
input IntFilter {
    equals: Int
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    in: [Int!]
    not: IntFilter
}

"""
Filter for String values. Only one operator applies at a time.
"""
input StringFilter {
    equals: String
    equalsIgnoreCase: String
    contains: String
    in: [String!]
    not: StringFilter
}

"""
Ways in which to filter user products.
"""
input UserProductFilters {
    """
    Logical 'AND' operator.
    """
    and: [UserProductFilters!]

    """
    Logical 'OR' operator.
    """
    or: [UserProductFilters!]

    """
    List user products by type.
    """
    type: StringFilter

    """
    List user products by name.
    """
    name: StringFilter

    """
    List user products by year.
    """
    year: IntFilter
}

"""
Ordering options for User Products connections.
"""
input UserProductOrder {
    """
    The direction in which to order user products.
    """
    direction: OrderDirection = ASC

    """
    The field by which to order user products.
    """
    field: UserProductOrderField = NAME
}

"""
Properties by which User Products connections can be ordered.
"""
enum UserProductOrderField {
    """
    Order user products list by name.
    """
    NAME
}

"""
The product is a service offered to customers.
"""
type Product {
    id: ID!

    """
    The product's type.
    """
    type: String!

    """
    The descriptive name of product.
    """
    name: String!

    """
    The year of launch.
    """
    year: Int!

    """
    Identifies the date and time when the object was last updated.
    """
    updateTime: String!

    """
    A list of users who has access to this product.
    """
    users: [User]
}

"""
Input type of create product.
"""
input CreateProductInput {
    """
    A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    """
    The name of the new product.
    """
    name: String! @Size(min: 2, max : 10)

    """
    The product's type.
    """
    type: String! @Size(min: 1, max : 4)
}

"""
Input type of update product.
"""
input UpdateProductInput {
    """
    A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    """
    The id of product to update
    """
    id: ID!

    """
    The new product name.
    """
    name: String @Size(min: 2, max : 10)
}

"""
Input type of delete product.
"""
input DeleteProductInput {
    """
    A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    """
    The id of the product to delete.
    """
    id: ID!
}

"""
Return type of create, update or delete product.
"""
type ProductPayload {
    """
    A unique identifier for the client performing the mutation.
    """
    clientMutationId: String

    """
    The product that was just deleted.
    """
    product: Product
}